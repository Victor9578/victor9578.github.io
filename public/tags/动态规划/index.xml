<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>动态规划 on Jaywxl</title>
    <link>https://bl.jawyxl.eu.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
    <description>Recent content in 动态规划 on Jaywxl</description>
    <image>
      <url>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</url>
      <link>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 05 Dec 2022 20:22:14 +0800</lastBuildDate><atom:link href="https://bl.jawyxl.eu.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>11_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/11_stu/</link>
      <pubDate>Mon, 05 Dec 2022 20:22:14 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/11_stu/</guid>
      <description>动态规划之最少趟数</description>
      <content:encoded><![CDATA[<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Target<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><input checked="" disabled="" type="checkbox"> see 动态规划</li>
<li><input disabled="" type="checkbox"> init github&quot;stock_trade&quot; and ReadMe</li>
</ul>
</div>
        </div>
    </div>
<h2 id="02_路径总和">02_路径总和</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Definition for a binary tree node.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class TreeNode:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.val = val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.left = left</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.right = right</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class Solution:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -&gt; bool:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         if root:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             targetSum = targetSum - root.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             return False</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         stack = []</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         sum = []</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         while root:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             print(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             a,b = float(&#39;-inf&#39;),float(&#39;-inf&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.left: a = root.left.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.right: b = root.right.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.right and root.left:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 stack.append(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 sum.append(targetSum)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if a &gt; b :</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum -= a</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = root.left</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum -= b</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = root.right</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             print(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if targetSum != 0 and not root.left and not root.right and  stack:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = stack.pop()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum = sum.pop()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 if root.right.val &gt; root.left.val:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                     root.right = None</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                     root.left = None</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             elif targetSum == 0 and not root.left and not root.right:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 return True </span>
</span></span><span class="line"><span class="cl"><span class="c1">#             elif targetSum != 0 and not root.left and not root.right:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 return False</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">最终被击溃在两个子节点数值相等的问题上导致无法回溯，可以优化存在栈里面回溯的treenode，将选择的一边设为None
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Method_递归</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">hasPathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">targetSum</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">targetSum</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="02_搜索二叉树">02_搜索二叉树</h2>
<blockquote>
<p>搜索二叉树满足对于任意节点 root 而言，左子树（如果存在）上所有节点的值均小于 \textit{root.val}root.val，右子树（如果存在）上所有节点的值均大于 \textit{root.val}root.val，且它们都是二叉搜索树。
递归</p>
</blockquote>
<h2 id="init_stock_trade">init_stock_trade</h2>]]></content:encoded>
    </item>
    
  </channel>
</rss>
