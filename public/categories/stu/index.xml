<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>stu on Jaywxl</title>
    <link>https://bl.jawyxl.eu.org/categories/stu/</link>
    <description>Recent content in stu on Jaywxl</description>
    <image>
      <url>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</url>
      <link>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 11 Aug 2023 21:38:29 +0800</lastBuildDate><atom:link href="https://bl.jawyxl.eu.org/categories/stu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Long_ago_compostion</title>
      <link>https://bl.jawyxl.eu.org/posts/life/long_ago_compostion/</link>
      <pubDate>Fri, 11 Aug 2023 21:38:29 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/life/long_ago_compostion/</guid>
      <description>在这里 向长安，对秋灯，几人老？ 这是一抔喧哗了千年的黄土，是十三朝顶礼膜拜的故都。这里秦时的明月正皎洁，汉代的城门正轻启。 秦始皇在这里挥剑浮云</description>
      <content:encoded><![CDATA[<blockquote>
<p>在这里
向长安，对秋灯，几人老？</p>
</blockquote>
<p>这是一抔喧哗了千年的黄土，是十三朝顶礼膜拜的故都。这里秦时的明月正皎洁，汉代的城门正轻启。</p>
<p>秦始皇在这里挥剑浮云，东指六国，逐鹿中原；汉武帝在这里横剑漠北，踏碎匈奴铁骑的狼烟；张骞在这里拜别故里，逶迤西行，踩出丝绸之路曲折的痕迹；玄奘在这里打点行装，把大唐盛世的种子播撒向繁花如锦的天竺。无数人怀揣着无数瑰丽的梦，把鲜活的生命化作丹砂，镌刻在汗青竹简里。这里，万世流芳。</p>
<p>骊山的草木见证着，周幽烽火在这里戏取各路诸侯，褒姒倾国倾城的微笑揭开春秋乱世的序幕；大明宫殿前的麒麟目睹了，牡丹在这里不畏武皇淫威的铁骨铮铮，翩跹至洛阳而名动天下；华清池的海棠汤倒映过，杨贵妃在这里霓裳羽衣轻柔的魅影，断送一代盛世璀璨的华章；摆着酒座亭台楼阁回忆着，诗仙李白把酒当歌，绣口吐出半个盛唐的飘逸与洒脱。这是历史最绚丽的舞台，动人的故事演绎出一幕幕惊心动魄的诗行。这里，百转千回。</p>
<p>响彻高原的秦腔伴着埙声叙述着悠远的传说，羊肉泡馍的暖汤融化了柿子上凝结的火红的秋霜。摇着蒲扇的老人，敲着波浪鼓的孩子，细嗅沿街槐花飘香十里，踏过梧桐橙黄橘绿的落叶缤纷；踩着高跟鞋的白领丽人，捂着耳机灌输摇滚的学生，穿过滚滚而过的车烟肆虐，抬眼望摩天大楼里映出的云淡风轻。精彩的生活，融入一个个或悠闲或匆忙的背影，传递着生命的脉搏，为世界注入鲜活的血液。这里，异彩纷呈。</p>
<p>只有在这里，历史与现代才能如此完美地融合。如同古老的雁塔金铃声中飞扬的喷泉音乐，如同晨钟暮鼓的低吟浅唱里车流的喧嚣不息。</p>
<p>这里，是时间的灰烬，是历史的尘埃，沐浴着新时代的甘露，绽放出一朵崭新的明媚的芬芳。</p>
<p>这里，长安。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>15_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/15_stu/</link>
      <pubDate>Thu, 15 Dec 2022 21:44:43 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/15_stu/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="sql_rank函数">sql_Rank()函数</h2>
<p>编写 SQL 查询对分数进行排序。排名按以下规则计算:</p>
<p>分数应按从高到低排列。
如果两个分数相等，那么两个分数的排名应该相同。
在排名相同的分数后，排名数应该是下一个连续的整数。换句话说，排名之间不应该有空缺的数字。
按 score 降序返回结果表。</p>
<p>查询结果格式如下所示。</p>
<p> </p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">示例 1:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">输入: 
</span></span><span class="line"><span class="cl">Scores 表:
</span></span><span class="line"><span class="cl">+----+-------+
</span></span><span class="line"><span class="cl">| id | score |
</span></span><span class="line"><span class="cl">+----+-------+
</span></span><span class="line"><span class="cl">| 1  | 3.50  |
</span></span><span class="line"><span class="cl">| 2  | 3.65  |
</span></span><span class="line"><span class="cl">| 3  | 4.00  |
</span></span><span class="line"><span class="cl">| 4  | 3.85  |
</span></span><span class="line"><span class="cl">| 5  | 4.00  |
</span></span><span class="line"><span class="cl">| 6  | 3.65  |
</span></span><span class="line"><span class="cl">+----+-------+
</span></span><span class="line"><span class="cl">输出: 
</span></span><span class="line"><span class="cl">+-------+------+
</span></span><span class="line"><span class="cl">| score | rank |
</span></span><span class="line"><span class="cl">+-------+------+
</span></span><span class="line"><span class="cl">| 4.00  | 1    |
</span></span><span class="line"><span class="cl">| 4.00  | 1    |
</span></span><span class="line"><span class="cl">| 3.85  | 2    |
</span></span><span class="line"><span class="cl">| 3.65  | 3    |
</span></span><span class="line"><span class="cl">| 3.65  | 3    |
</span></span><span class="line"><span class="cl">| 3.50  | 4    |
</span></span><span class="line"><span class="cl">+-------+------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>来源：力扣（LeetCode）</p>
<p>链接：https://leetcode.cn/problems/rank-scores</p>
<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p><figure><a class="lightgallery" href="https://m.360buyimg.com/babel/jfs/t1/166268/22/29671/167571/639b2505Ea125be86/b722e14504a2c62c.png" title="rank" data-thumbnail="https://m.360buyimg.com/babel/jfs/t1/166268/22/29671/167571/639b2505Ea125be86/b722e14504a2c62c.png">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://m.360buyimg.com/babel/jfs/t1/166268/22/29671/167571/639b2505Ea125be86/b722e14504a2c62c.png"
            loading="lazy"
            title="rank"
            alt="https://m.360buyimg.com/babel/jfs/t1/166268/22/29671/167571/639b2505Ea125be86/b722e14504a2c62c.png" />
    </a><figcaption class="image-caption">rank</figcaption>
</figure>
</p>
<p>rank()相关函数的使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="k">Write</span><span class="w"> </span><span class="n">your</span><span class="w"> </span><span class="n">MySQL</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="k">statement</span><span class="w"> </span><span class="n">below</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">score</span><span class="p">,</span><span class="w"> </span><span class="n">dense_rank</span><span class="p">()</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="p">(</span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="k">desc</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s1">&#39;rank&#39;</span><span class="w">  </span><span class="o">#</span><span class="err">这个</span><span class="n">rank之所以要加引号</span><span class="err">，因为</span><span class="n">rank本身是个函数</span><span class="err">，直接写</span><span class="n">rank会报错</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">scores</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 异或这种count1前面的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">Score</span><span class="p">,(</span><span class="k">select</span><span class="w"> </span><span class="k">count</span><span class="p">(</span><span class="k">distinct</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">Score</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Scores</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">Score</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">Score</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s1">&#39;rank&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Scores</span><span class="w"> </span><span class="n">a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">Score</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>14_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/14_stu/</link>
      <pubDate>Mon, 12 Dec 2022 21:43:13 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/14_stu/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="数组之求和为k的连续子数组数量">数组之求和为k的连续子数组数量</h2>
<p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k 的连续子数组的个数 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,1,1], k = 2
输出：2</p>
<p>示例 2：</p>
<p>输入：nums = [1,2,3], k = 3
输出：2</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：https://leetcode.cn/problems/subarray-sum-equals-k</p>
<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>使用的原理就是 presum-k 若在 之前哈希表中的 presum 出现过 那么 必定有连续的数组和为k<br>
因为之前统计的presum为一段连续数组，现如今的presum同为连续数组，两个连续数组相减，和为k的数组也必为连续数组<br>
若presum在哈希表中不唯一 表示连续数组中出现了和为0的子数组。</p>
</blockquote>
<p><figure><a class="lightgallery" href="https://pic.leetcode-cn.com/1650818225-XIUNgx-image.png" title="111" data-thumbnail="https://pic.leetcode-cn.com/1650818225-XIUNgx-image.png">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://pic.leetcode-cn.com/1650818225-XIUNgx-image.png"
            loading="lazy"
            title="111"
            alt="https://pic.leetcode-cn.com/1650818225-XIUNgx-image.png" />
    </a><figcaption class="image-caption">111</figcaption>
</figure>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">subarraySum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">prehash</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">prehash</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">preSum</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">preSum</span> <span class="o">+=</span> <span class="n">num</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">preSum</span> <span class="o">-</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">prehash</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span> <span class="o">+=</span> <span class="n">prehash</span><span class="p">[</span><span class="n">preSum</span> <span class="o">-</span> <span class="n">k</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">preSum</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">prehash</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">prehash</span><span class="p">[</span><span class="n">preSum</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">prehash</span><span class="p">[</span><span class="n">preSum</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>13_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/13_stu/</link>
      <pubDate>Sun, 11 Dec 2022 23:34:11 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/13_stu/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。</p>
<p>每列的元素从上到下升序排列。
 
<figure><a class="lightgallery" href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg" title="img" data-thumbnail="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg"
            loading="lazy"
            title="img"
            alt="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg" />
    </a><figcaption class="image-caption">img</figcaption>
</figure>
</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：https://leetcode.cn/problems/search-a-2d-matrix-ii</p>
<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">* 二分法
</span></span></span><span class="line"><span class="cl"><span class="s2">* z字型搜索 从右上角 两个边界数值 一大一小的地方 开启搜索 各向异性
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Method_二分法</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">searchMatrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">idx</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="ow">and</span> <span class="n">row</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Method_z字型法则</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">从右上角 或 左下角 开始搜索 满足两个方向的不同
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">searchMatrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>12_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/12_stu/</link>
      <pubDate>Wed, 07 Dec 2022 17:10:59 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/12_stu/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="01_二叉搜索树公共祖先">01_二叉搜索树公共祖先</h2>
<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p><figure><a class="lightgallery" href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" title="公共祖先" data-thumbnail="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png"
            loading="lazy"
            title="公共祖先"
            alt="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" />
    </a><figcaption class="image-caption">公共祖先</figcaption>
</figure>
</p>
<p>示例 1:</p>
<p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6
解释: 节点 2 和节点 8 的最近公共祖先是 6。</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Definition for a binary tree node.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class TreeNode:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def __init__(self, x):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.val = x</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.left = None</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.right = None</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">巧妙的运用了二叉树搜索的条件定义，左中右三个值的大小关系
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">,</span> <span class="n">q</span><span class="p">:</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;TreeNode&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">small</span><span class="p">,</span><span class="n">big</span><span class="o">=</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">)</span> <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">val</span><span class="o">&lt;</span><span class="n">q</span><span class="o">.</span><span class="n">val</span> <span class="k">else</span> <span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">small</span><span class="o">.</span><span class="n">val</span><span class="o">&lt;=</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">big</span><span class="o">.</span><span class="n">val</span><span class="o">&gt;=</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">root</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>11_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/11_stu/</link>
      <pubDate>Mon, 05 Dec 2022 20:22:14 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/11_stu/</guid>
      <description>动态规划之最少趟数</description>
      <content:encoded><![CDATA[<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Target<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li><input checked="" disabled="" type="checkbox"> see 动态规划</li>
<li><input disabled="" type="checkbox"> init github&quot;stock_trade&quot; and ReadMe</li>
</ul>
</div>
        </div>
    </div>
<h2 id="02_路径总和">02_路径总和</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Definition for a binary tree node.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class TreeNode:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def __init__(self, val=0, left=None, right=None):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.val = val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.left = left</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.right = right</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class Solution:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -&gt; bool:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         if root:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             targetSum = targetSum - root.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             return False</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         stack = []</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         sum = []</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         while root:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             print(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             a,b = float(&#39;-inf&#39;),float(&#39;-inf&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.left: a = root.left.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.right: b = root.right.val</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if root.right and root.left:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 stack.append(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 sum.append(targetSum)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if a &gt; b :</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum -= a</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = root.left</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum -= b</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = root.right</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             print(root)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             if targetSum != 0 and not root.left and not root.right and  stack:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 root = stack.pop()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 targetSum = sum.pop()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 if root.right.val &gt; root.left.val:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                     root.right = None</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 else:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                     root.left = None</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             elif targetSum == 0 and not root.left and not root.right:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 return True </span>
</span></span><span class="line"><span class="cl"><span class="c1">#             elif targetSum != 0 and not root.left and not root.right:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                 return False</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">最终被击溃在两个子节点数值相等的问题上导致无法回溯，可以优化存在栈里面回溯的treenode，将选择的一边设为None
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Method_递归</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">hasPathSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">],</span> <span class="n">targetSum</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">targetSum</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="02_搜索二叉树">02_搜索二叉树</h2>
<blockquote>
<p>搜索二叉树满足对于任意节点 root 而言，左子树（如果存在）上所有节点的值均小于 \textit{root.val}root.val，右子树（如果存在）上所有节点的值均大于 \textit{root.val}root.val，且它们都是二叉搜索树。
递归</p>
</blockquote>
<h2 id="init_stock_trade">init_stock_trade</h2>]]></content:encoded>
    </item>
    
    <item>
      <title>07_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/07_stu/</link>
      <pubDate>Wed, 30 Nov 2022 16:32:38 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/07_stu/</guid>
      <description>开启链表的学习主要是快慢指针方法 或者 用哈希表的方法</description>
      <content:encoded><![CDATA[<h2 id="1_链表_判断是否有环">1_链表_判断是否有环</h2>
<p>开启链表的学习主要是快慢指针方法 或者 用哈希表的方法
<figure><a class="lightgallery" href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" title="leecode_链表" data-thumbnail="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" data-sub-html="<h2>leecode_链表</h2><p>leecode_链表</p>">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"
            loading="lazy"
            title="leecode_链表"
            alt="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" />
    </a><figcaption class="image-caption">leecode_链表</figcaption>
</figure>
<br>
输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Definition for singly-linked list.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># class ListNode:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     def __init__(self, x):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.val = x</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         self.next = None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 空链表或链表只有一个节点，无环</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span> <span class="ow">or</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 初始化快慢指针</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 如果不存在环，肯定 fast 先指向 null</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">fast</span> <span class="ow">and</span> <span class="n">fast</span><span class="o">.</span><span class="n">next</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># 快指针移动 2 步，慢指针移动 1 步</span>
</span></span><span class="line"><span class="cl">            <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
</span></span><span class="line"><span class="cl">            <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="n">next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># 快慢指针相遇，有环</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">fast</span> <span class="o">==</span> <span class="n">slow</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2_链表递归">2_链表递归</h2>
<p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。
 </p>
<p>示例 1：
<figure><a class="lightgallery" href="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" title="2" data-thumbnail="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" data-sub-html="<h2>链表删除</h2><p>2</p>">
        <img
            class="lazy"
            src="/svg/loading.min.svg"
            data-src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg"
            loading="lazy"
            title="2"
            alt="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" />
    </a><figcaption class="image-caption">2</figcaption>
</figure>
</p>
<p>输入：head = [1,2,6,3,4,5,6], val = 6
输出：[1,2,3,4,5]
示例 2：</p>
<p>输入：head = [], val = 1
输出：[]
示例 3：</p>
<p>输入：head = [7,7,7,7], val = 7
输出：[]</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/remove-linked-list-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">head</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">removeElements</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">next</span><span class="p">,</span><span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># self.removeElements(head.next,val)  错误是否需要前面先赋值，否则return的怎么返回 eg下方正确方式</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">removeElements</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">next</span><span class="p">,</span><span class="n">val</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">head</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>06_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/06_stu/</link>
      <pubDate>Tue, 29 Nov 2022 14:07:55 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/06_stu/</guid>
      <description>01_adddate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 输入： Weather 表： +----+------------+-------------+ | id | recordDate | Temperature | +----+------------+-------------+ | 1 | 2015-01-01 | 10 | | 2 | 2015-01-02 | 25 | | 3 | 2015-01-03 | 20 | | 4 | 2015-01-04 | 30 | +----+------------+-------------+ 输</description>
      <content:encoded><![CDATA[<h2 id="01_adddate">01_adddate</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">输入：  
</span></span><span class="line"><span class="cl">Weather 表：  
</span></span><span class="line"><span class="cl">+----+------------+-------------+
</span></span><span class="line"><span class="cl">| id | recordDate | Temperature |
</span></span><span class="line"><span class="cl">+----+------------+-------------+
</span></span><span class="line"><span class="cl">| 1  | 2015-01-01 | 10          |
</span></span><span class="line"><span class="cl">| 2  | 2015-01-02 | 25          |
</span></span><span class="line"><span class="cl">| 3  | 2015-01-03 | 20          |
</span></span><span class="line"><span class="cl">| 4  | 2015-01-04 | 30          |
</span></span><span class="line"><span class="cl">+----+------------+-------------+
</span></span><span class="line"><span class="cl">输出：
</span></span><span class="line"><span class="cl">+----+
</span></span><span class="line"><span class="cl">| id |
</span></span><span class="line"><span class="cl">+----+
</span></span><span class="line"><span class="cl">| 2  |
</span></span><span class="line"><span class="cl">| 4  |
</span></span><span class="line"><span class="cl">+----+
</span></span><span class="line"><span class="cl">解释：
</span></span><span class="line"><span class="cl">2015-01-02 的温度比前一天高（10 -&gt; 25）
</span></span><span class="line"><span class="cl">2015-01-04 的温度比前一天高（20 -&gt; 30）
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">来源：力扣（LeetCode）
</span></span><span class="line"><span class="cl">链接：https://leetcode.cn/problems/rising-temperature
</span></span><span class="line"><span class="cl">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- ADDDATE函数日期增加
</span></span></span><span class="line"><span class="cl"><span class="c1">-- inner join内连接 会删除没有匹配的项 不会保留null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Weather</span><span class="w"> </span><span class="n">w1</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">ADDDATE</span><span class="p">(</span><span class="n">recordDate</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">uid</span><span class="p">,</span><span class="n">Temperature</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Weather</span><span class="p">)</span><span class="n">w2</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">recordDate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">uid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">Temperature</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">t</span><span class="p">;</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="02_判断两个字符串中元素是否一样多">02_判断两个字符串中元素是否一样多</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;ab&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span> <span class="o">=</span> <span class="s2">&#34;ba&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">firstUniqChar</span><span class="p">(</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># print(sorted(collections.Counter(t).most_common()))</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># print(collections.Counter(t).most_common())      sorted()排序</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">())</span> <span class="o">==</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Solution</span><span class="o">.</span><span class="n">firstUniqChar</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><!--

]]></content:encoded>
    </item>
    
    <item>
      <title>05_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/05_stu/</link>
      <pubDate>Mon, 28 Nov 2022 16:55:58 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/05_stu/</guid>
      <description>01_sql 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 给定一个表 tree，id 是树节点的编号， p_id 是它父节点的 id 。 +----+------+ | id | p_id | +----+------+ |</description>
      <content:encoded><![CDATA[<h2 id="01_sql">01_sql</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">给定一个表 tree，id 是树节点的编号， p_id 是它父节点的 id 。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">| id | p_id |
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">| 1  | null |
</span></span><span class="line"><span class="cl">| 2  | 1    |
</span></span><span class="line"><span class="cl">| 3  | 1    |
</span></span><span class="line"><span class="cl">| 4  | 2    |
</span></span><span class="line"><span class="cl">| 5  | 2    |
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">树中每个节点属于以下三种类型之一：
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">叶子：如果这个节点没有任何孩子节点。
</span></span><span class="line"><span class="cl">根：如果这个节点是整棵树的根，即没有父节点。
</span></span><span class="line"><span class="cl">内部节点：如果这个节点既不是叶子节点也不是根节点。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">写一个查询语句，输出所有节点的编号和节点的类型，并将结果按照节点编号排序。上面样例的结果为：
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">| id | Type |
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">| 1  | Root |
</span></span><span class="line"><span class="cl">| 2  | Inner|
</span></span><span class="line"><span class="cl">| 3  | Leaf |
</span></span><span class="line"><span class="cl">| 4  | Leaf |
</span></span><span class="line"><span class="cl">| 5  | Leaf |
</span></span><span class="line"><span class="cl">+----+------+
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">来源：力扣（LeetCode）
</span></span><span class="line"><span class="cl">链接：https://leetcode.cn/problems/tree-node
</span></span><span class="line"><span class="cl">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- case when Method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">when</span><span class="w"> </span><span class="n">p_id</span><span class="w"> </span><span class="k">is</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s1">&#39;Root&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">when</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">select</span><span class="w"> </span><span class="n">atree</span><span class="p">.</span><span class="n">p_id</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tree</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">atree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">)</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s1">&#39;Inner&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="s1">&#39;Leaf&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">end</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">tree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- if else Method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">IF</span><span class="p">(</span><span class="n">p_id</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;Root&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">IF</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">p_id</span><span class="w">  </span><span class="k">FROM</span><span class="w"> </span><span class="n">tree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">WHERE</span><span class="w"> </span><span class="n">p_id</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">),</span><span class="s1">&#39;Inner&#39;</span><span class="p">,</span><span class="s1">&#39;Leaf&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">Type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">tree</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="02_limit_offset_sql">02_limit_offset_sql</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Employee 表：
</span></span><span class="line"><span class="cl">+-------------+------+
</span></span><span class="line"><span class="cl">| Column Name | Type |
</span></span><span class="line"><span class="cl">+-------------+------+
</span></span><span class="line"><span class="cl">| id          | int  |
</span></span><span class="line"><span class="cl">| salary      | int  |
</span></span><span class="line"><span class="cl">+-------------+------+
</span></span><span class="line"><span class="cl">id 是这个表的主键。
</span></span><span class="line"><span class="cl">表的每一行包含员工的工资信息。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">编写一个 SQL 查询，获取并返回 Employee 表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 null 。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">查询结果如下例所示。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">示例 1：
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">输入：
</span></span><span class="line"><span class="cl">Employee 表：
</span></span><span class="line"><span class="cl">+----+--------+
</span></span><span class="line"><span class="cl">| id | salary |
</span></span><span class="line"><span class="cl">+----+--------+
</span></span><span class="line"><span class="cl">| 1  | 100    |
</span></span><span class="line"><span class="cl">| 2  | 200    |
</span></span><span class="line"><span class="cl">| 3  | 300    |
</span></span><span class="line"><span class="cl">+----+--------+
</span></span><span class="line"><span class="cl">输出：
</span></span><span class="line"><span class="cl">+---------------------+
</span></span><span class="line"><span class="cl">| SecondHighestSalary |
</span></span><span class="line"><span class="cl">+---------------------+
</span></span><span class="line"><span class="cl">| 200                 |
</span></span><span class="line"><span class="cl">+---------------------+
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">来源：力扣（LeetCode）
</span></span><span class="line"><span class="cl">链接：https://leetcode.cn/problems/second-highest-salary
</span></span><span class="line"><span class="cl">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- LIMIT 返回一步 OFFSET 跳过一步 DESC 倒序排列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Salary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">FROM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">Salary</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">SecondHighestSalary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="03_数独游戏">03_数独游戏</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">isValidSudoku</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;3&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;7&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;6&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;1&#34;</span><span class="p">,</span><span class="s2">&#34;9&#34;</span><span class="p">,</span><span class="s2">&#34;5&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;9&#34;</span><span class="p">,</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;6&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;6&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;3&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;4&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;3&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;7&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;2&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;6&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;6&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;2&#34;</span><span class="p">,</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;4&#34;</span><span class="p">,</span><span class="s2">&#34;1&#34;</span><span class="p">,</span><span class="s2">&#34;9&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;5&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">,[</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;8&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="s2">&#34;7&#34;</span><span class="p">,</span><span class="s2">&#34;9&#34;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">哈希算法 row,col,block分别生成的依据是9行*9个数字、9列*9个数字、9块*9个数字
</span></span></span><span class="line"><span class="cl"><span class="s1">在判断相同行列块中数字是否变成了赋值的1 从而return
</span></span></span><span class="line"><span class="cl"><span class="s1">不能 使用 [[0] *9]*9 这样第二个九相当于引用了9遍列表[[0] * 9] 会出现修改后数值都变 exp: [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">9</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">col</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">9</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">block</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">9</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;.&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">//</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span> <span class="o">//</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">num</span><span class="p">]</span> <span class="ow">or</span> <span class="n">col</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">num</span><span class="p">]</span> <span class="ow">or</span> <span class="n">block</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">num</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">col</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">block</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">Method 2 ： 生成三种数组，再将合并成一种数组，遍历其中的counter，看每个的计数情况是否为 0，1
</span></span></span><span class="line"><span class="cl"><span class="s1">改进 判断哈希赋值 32ms,99%
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># n = list(map(list,zip(*board)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># nn,nnn = [],[]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># for a in board:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     nn += a</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ab = [nn[i:i+3] for i in range(0,len(nn),3)]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># for b in [0,1,2,9,10,11,18,19,20]:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     nnn += [ab[b]+ab[b+3]+ab[b+6]]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># num = board+n+nnn</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">num</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">nnnn</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">9</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="s1">&#39;.&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">nnnn</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                <span class="n">nnnn</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># rs = 0</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># for a in range(len(num)):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#         count = Counter(num[a])</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#         for i in range(1,10):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#             if count[str(i)] not in [0,1]:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#                     rs += 1</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#                     return False</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#             else: continue</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if rs == 0 : return True</span>
</span></span></code></pre></td></tr></table>
</div>
</div><!--

]]></content:encoded>
    </item>
    
    <item>
      <title>04_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/04_stu/</link>
      <pubDate>Sun, 27 Nov 2022 23:32:54 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/04_stu/</guid>
      <description>01_数组切片分组 1 2 3 4 5 6 7 8 9 10 11 12 mat = [[1,2],[3,4],[5,6]] r,c = 2,3 ans = [[0]*c for _ in range(r)] a = [] class Solution: def matrixReshape(self, mat: List[List[int]], r: int, c: int) -&amp;gt; List[List[int]]: if len(mat)*len(mat[0]) == r*c : for i in mat: a +=i return [a[i:i + c] for i in range(0, len(a), c)]</description>
      <content:encoded><![CDATA[<h2 id="01_数组切片分组">01_数组切片分组</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">mat</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="p">,</span><span class="n">c</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="n">ans</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">c</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">r</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">matrixReshape</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mat</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="n">r</span><span class="o">*</span><span class="n">c</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">mat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">a</span> <span class="o">+=</span><span class="n">i</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">c</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">c</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="n">mat</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="02_杨辉三角">02_杨辉三角</h2>
<blockquote>
<p>杨辉三角<br>
弄清yieid 和 return 区别 yieid可迭代</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">triangles</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>              <span class="c1">#定义L为一个只包含一个元素的列表</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">L</span>          <span class="c1">#定义为生成器函数</span>
</span></span><span class="line"><span class="cl">            <span class="n">L</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">L</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">))]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numRows</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">Solution</span><span class="o">.</span><span class="n">triangles</span><span class="p">(</span><span class="n">numRows</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法二 简化</span>
</span></span><span class="line"><span class="cl">        <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>              <span class="c1">#定义L为一个只包含一个元素的列表</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">L</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">L</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">))]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span>
</span></span></code></pre></td></tr></table>
</div>
</div><!--

]]></content:encoded>
    </item>
    
    <item>
      <title>03_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/03_stu/</link>
      <pubDate>Sun, 27 Nov 2022 18:14:59 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/03_stu/</guid>
      <description>01_返回交集 给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如</description>
      <content:encoded><![CDATA[<h2 id="01_返回交集">01_返回交集</h2>
<p>给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。 </p>
<p>示例 1：</p>
<p>输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:</p>
<p>输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/intersection-of-two-arrays-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nums1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">nums2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nn</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">count</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span><span class="o">&amp;</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">nums2</span><span class="p">))</span><span class="o">.</span><span class="n">elements</span><span class="p">()</span> <span class="c1"># 一行代码</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">&amp;</span><span class="n">nums2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="02_concat_upper_lower_sql">02_concat_upper_lower_sql</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">CONCAT</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="err">拼接字符串</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="p">,</span><span class="k">RIGHT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">UPPER</span><span class="p">,</span><span class="k">LOWER</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="err">大写，小写</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">user_id</span><span class="p">,</span><span class="w"> </span><span class="n">CONCAT</span><span class="p">(</span><span class="k">UPPER</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)),</span><span class="w"> </span><span class="k">LOWER</span><span class="p">(</span><span class="k">RIGHT</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="k">length</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">)))</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Users</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">user_id</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="03_sql">03_sql</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- group_concat 字符串连接
</span></span></span><span class="line"><span class="cl"><span class="c1">-- group by 分组
</span></span></span><span class="line"><span class="cl"><span class="c1">-- count 统计
</span></span></span><span class="line"><span class="cl"><span class="c1">-- distinct 去重
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">sell_date</span><span class="p">,</span><span class="w"> </span><span class="k">count</span><span class="p">(</span><span class="k">distinct</span><span class="p">(</span><span class="n">product</span><span class="p">))</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">num_sold</span><span class="p">,</span><span class="w"> </span><span class="n">group_concat</span><span class="p">(</span><span class="k">distinct</span><span class="w"> </span><span class="n">product</span><span class="w"> </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">product</span><span class="w"> </span><span class="k">asc</span><span class="w"> </span><span class="n">separator</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">products</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Activities</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">sell_date</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="04_sql">04_sql</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">patient_id</span><span class="p">,</span><span class="n">patient_name</span><span class="p">,</span><span class="n">conditions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">PAtients</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">conditions</span><span class="w"> </span><span class="n">regexp</span><span class="w"> </span><span class="s1">&#39;^DIAB1|\\sDIAB1&#39;</span><span class="p">;</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="err">正则表达式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">conditions</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;DIAB1%&#39;</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="n">conditions</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;% DIAB1%&#39;</span><span class="w"> </span><span class="o">#</span><span class="n">like的匹配得有百分号</span><span class="err">（类似于</span><span class="o">*</span><span class="err">）</span><span class="w"> </span><span class="err">否则该语句等同于</span><span class="o">=</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><!--

]]></content:encoded>
    </item>
    
    <item>
      <title>02_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/02_stu/</link>
      <pubDate>Sun, 27 Nov 2022 18:14:53 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/02_stu/</guid>
      <description>01_找出出现一次的元素(reduce) 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元</description>
      <content:encoded><![CDATA[<h2 id="01_找出出现一次的元素reduce">01_找出出现一次的元素(reduce)</h2>
<p>给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode.cn/problems/single-number<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<blockquote>
<p>reduce函数累计 a^b^c^d^&hellip;.<br>
异或  不同输出本身  时间复杂度O(1)   空间复杂度O(n)</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>
</span></span><span class="line"><span class="cl"><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">singleNumber</span><span class="p">(</span><span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="p">:</span> <span class="n">x</span><span class="o">^</span><span class="n">y</span><span class="p">,</span><span class="n">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Solution</span><span class="o">.</span><span class="n">singleNumber</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="02_update_sql方法asciiif方法case-when">02_update_sql方法(ascii,if方法,case when)</h2>
<p>Salary 表：</p>
<p>+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;-+
| Column Name | Type     |
+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;-+
| id          | int      |
| name        | varchar  |
| sex         | ENUM     |
| salary      | int      |
+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;-+
id 是这个表的主键。
sex 这一列的值是 ENUM 类型，只能从 (&rsquo;m&rsquo;, &lsquo;f&rsquo;) 中取。
本表包含公司雇员的信息。
 </p>
<p>请你编写一个 SQL 查询来交换所有的 &lsquo;f&rsquo; 和 &rsquo;m&rsquo; （即，将所有 &lsquo;f&rsquo; 变为 &rsquo;m&rsquo; ，反之亦然），仅使用 单个 update 语句 ，且不产生中间临时表。</p>
<p>注意，你必须仅使用一条 update 语句，且 不能 使用 select 语句。</p>
<p>查询结果如下例所示。</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/swap-salary
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">update</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">char</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ascii</span><span class="p">(</span><span class="s1">&#39;f&#39;</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">ascii</span><span class="p">(</span><span class="n">sex</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 使用ascii码值的变换 sql语法特点
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 方法一：MySql中的if语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">update</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="p">(</span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;m&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;f&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;m&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 方法二：case when语法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">update</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="k">when</span><span class="w"> </span><span class="s1">&#39;m&#39;</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s1">&#39;f&#39;</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="s1">&#39;m&#39;</span><span class="w"> </span><span class="k">end</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="03_delect_sql建立两个表格">03_delect_sql(建立两个表格)</h2>
<p>输入:
Person 表:
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id | email            |
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| 1  | <a href="mailto:john@example.com">john@example.com</a>
 |
| 2  | <a href="mailto:bob@example.com">bob@example.com</a>
  |
| 3  | <a href="mailto:john@example.com">john@example.com</a>
 |
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
输出:
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id | email            |
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| 1  | <a href="mailto:john@example.com">john@example.com</a>
 |
| 2  | <a href="mailto:bob@example.com">bob@example.com</a>
  |
+&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
解释: <a href="mailto:john@example.com">john@example.com</a>
重复两次。我们保留最小的Id = 1。</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/delete-duplicate-emails
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## 删除重复项目 使用 sql自连接 
</span></span><span class="line"><span class="cl">```sql
</span></span><span class="line"><span class="cl">DELETE p1 FROM Person p1,
</span></span><span class="line"><span class="cl">    Person p2
</span></span><span class="line"><span class="cl">WHERE
</span></span><span class="line"><span class="cl">    p1.Email = p2.Email AND p1.Id &gt; p2.Id
</span></span><span class="line"><span class="cl">```
</span></span><span class="line"><span class="cl">&lt;!--
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>01_stu</title>
      <link>https://bl.jawyxl.eu.org/posts/study/01_stu/</link>
      <pubDate>Sun, 27 Nov 2022 17:47:50 +0800</pubDate>
      
      <guid>https://bl.jawyxl.eu.org/posts/study/01_stu/</guid>
      <description>01_03题 旋转 转置 遍历 栈存方法（学习） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 matrix = [[7,4],[9,5],[6,3]] nn = [] print(list(zip(*matrix))[::-1]) matrix = map(list, zip(*matrix)) print(matrix) i = 1 while matrix != []:</description>
      <content:encoded><![CDATA[<h2 id="01_03题">01_03题</h2>
<p>旋转 转置<br>
遍历<br>
栈存方法（学习）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">9</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nn</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">))[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">matrix</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="k">while</span> <span class="n">matrix</span> <span class="o">!=</span> <span class="p">[]:</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">aa</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">aa</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">             <span class="n">nn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">aa</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">bb</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bb</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">             <span class="n">nn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">bb</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">             <span class="n">nn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">))[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">             <span class="n">nn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">     <span class="k">while</span> <span class="p">[]</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">matrix</span><span class="o">.</span><span class="n">remove</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="n">nn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">sql</span><span class="w"> </span><span class="err">题目</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">只有</span><span class="w"> </span><span class="n">Ture</span><span class="w"> </span><span class="k">False</span><span class="w"> </span><span class="n">unknow</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">有</span><span class="k">NULL</span><span class="w"> </span><span class="err">要判断</span><span class="k">NULL</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><!-- 

]]></content:encoded>
    </item>
    
  </channel>
</rss>
